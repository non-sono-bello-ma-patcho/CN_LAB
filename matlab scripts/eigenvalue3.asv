% Developed by: Non sono bello ma patcho
% https://github.com/non-sono-bello-ma-patcho 
% Developers:   Andrea Storace (4186140)
%               Andrea Straforini (4338710)
%               Elisa Zazzera (4380663)
% Given data:
A = [1 -1 2;-2 0 5;6 -3 6];
v1 = [1 1 1]';
v2 = [3 10 4]';

% calcolo di autovalori e velocità di convergenza con metodo delle potenze
[cs1, eig1] = mp(v1, A);
[cs2, eig2] = mp(v2, A);

% calcolo di autovalori e velocità di convergenza con metodo delle potene
% inverse
[ics1, ieig1] = inv_mp(4.5, v1, A);
[ics2, ieig2] = inv_mp(4.5, v2, A);

% Calcolo della variazione della velocità in base allo shift

T1 = table(eig1, ieig1);
T2 = table(eig2, ieig2);
T3 = table(cs1, ics1, cs2, ics2);

writetable(T1,'eigenvalue_results.xlsx','Sheet',3,'Range','A1');
writetable(T2,'eigenvalue_results.xlsx','Sheet',3,'Range','C1');
writetable(T3,'eigenvalue_results.xlsx','Sheet',3,'Range','E1');

% This just plot convergence speed:
%shiftspre = [4.2:0.1:4.8];
%cspre = shiftspre;
%i=1;
%for s=shiftspre; [cspre(i), tmp] = inv_mp(s, v1, A); i=i+1; end

shiftspost = [5.6:0.5:20];
cspost = shiftspost;
i=1;
for s=shiftspost; [cspost(i), tmp] = inv_mp(s, v1, A); i=i+1; end

shifts = [shiftspre shiftspost];
csf = [cspre cspost];   

% Funzione che implementa il metodo delle potenze
function [conv_speed, lam] = mp(v, A)
    prevlam = 0;
    conv_speed = 0;
    while true 
        % Computing egeinvector
        w=A*v;
        % Computing egeinvalue:
        lam = (v'*w)/(v'*v);
        % updating v:
        v = w/norm(w);
        if(abs(lam-prevlam)<eps) 
            break;
        end
        prevlam = lam;
        conv_speed = conv_speed+1;
    end
end

% Funzione che implementa il metodo delle potenze inverse
function [ conv_speed, lam ] = inv_mp(shift, v, A)
    I=eye(size(A)); % matrice identità della stessa dimensione di quella in argomento
    prev=0;
    conv_speed=0;
    while true
     W=inv(A-shift*I)*v;
     lam_aux=(v' * W)/(v'*v);
     v=W/(norm(W));
     lam=shift+(1/lam_aux);
     % stop if more accurate than eps
     if (abs(lam - prev)<eps)
        break;
     end
     prev=lam;
     conv_speed=conv_speed+1;
    end 
end